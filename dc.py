# -*- coding: utf-8 -*-
"""DC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BBra2gSgfm2b9OF2IqQZynD1f8pyb1ct

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv("Hotel Reservations.csv")

print("\n=== –ü–û–ò–°–ö –ê–ù–û–ú–ê–õ–ò–ô ===")
def quick_audit(df):
    report = {
        '–°—Ä–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è > 1 –≥–æ–¥': (df['lead_time'] > 365).sum(),
        '–î–µ—Ç–∏ –±–µ–∑ –≤–∑—Ä–æ—Å–ª—ã—Ö': ((df['no_of_adults'] == 0) & (df['no_of_children'] > 0)).sum(),
        '–ë—Ä–æ–Ω–∏ –±–µ–∑ –≥–æ—Å—Ç–µ–π': (df['no_of_adults'] + df['no_of_children'] == 0).sum(),
        '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—á–∏': ((df['no_of_weekend_nights'] < 0) | (df['no_of_week_nights'] < 0)).sum()
    }
    return report

print("\nüîç –û—Ç—á—ë—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö:")
for issue, count in quick_audit(df).items():
    print(f"‚Ä¢ {issue}: {count}")

"""# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–≥–∏—Ö lead_time –∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–≤–∑—Ä–æ—Å–ª—ã–µ + –¥–µ—Ç–∏)"""

df = df[df['lead_time'] <= 365]
df = df[~((df['no_of_adults'] != 0) & (df['no_of_children'] > 0))]
df

"""# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""

print("\n=== –ü–†–û–í–ï–†–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ü–£–°–ö–û–í ===")
missing = df.isnull().sum()
if missing.sum() == 0:
    print("‚úì –ü—Ä–æ–ø—É—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
else:
    print("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö:")
    display(missing[missing > 0])

numeric_cols = ['lead_time', 'no_of_adults', 'no_of_children',
                   'no_of_weekend_nights', 'no_of_week_nights']
categorical_cols = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']

"""# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π"""

print("\n=== –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô ===")
current_year = pd.Timestamp.now().year
time_issues = {
    '–ë—Ä–æ–Ω–∏ –∏–∑ –±—É–¥—É—â–µ–≥–æ': (df['arrival_year'] > current_year).sum(),
}
price_issues = {
    '–¶–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ <= 0': (df['avg_price_per_room'] <= 0).sum(),
    '–¶–µ–Ω–∞ > 99% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è': (df['avg_price_per_room'] > df['avg_price_per_room'].quantile(0.99)).sum()
}

print("\nüìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:")
print("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:")
for issue, count in time_issues.items():
    print(f"‚Ä¢ {issue}: {count}")

print("\n–¶–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:")
for issue, count in price_issues.items():
    print(f"‚Ä¢ {issue}: {count}")

"""# –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞"""

df = df[df['avg_price_per_room'] > 0]
df = df[df['avg_price_per_room'] < df['avg_price_per_room'].quantile(0.99)]
df

"""# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—Å–∫–∏"""

print("\n=== –û–ë–ó–û–† –î–ê–ù–ù–´–• ===")

print("\n–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
desc = df.describe(include='all')
pd.options.display.float_format = '{:.2f}'.format
with pd.option_context('display.max_columns', 10):
    display(desc)

print("\n–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
print(df.info())

print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
missing_values = df.isnull().sum()
print(missing_values.to_string())

print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫:", df.duplicated().sum())

cat_cols = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type', 'booking_status']
for col in cat_cols:
    print(f"\n–ö–æ–ª–æ–Ω–∫–∞: {col}")
    print(df[col].unique()[:5])

"""# –ê–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""

print("\n=== –ê–ù–ê–õ–ò–ó –ß–ò–°–õ–û–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")

print("\n–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π:")
plt.style.use('default')
axes = df.hist(
    figsize=(20, 15),
    bins=20,
    grid=False,
    color='#ab1636',
    edgecolor='white',
    linewidth=1,
    zorder=2
)
plt.suptitle("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", y=1, fontsize=20, fontweight='bold')
for ax in axes.flatten():
    for spine in ['top', 'right']:
        ax.spines[spine].set_visible(False)
    ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è', fontsize=12, labelpad=10)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12, labelpad=10)
    ax.set_title(ax.get_title(), fontsize=14, pad=10)
plt.tight_layout()
plt.show()

# –ü–æ—Å–ª–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–∫—Å–ø–ª–æ—Ç—ã —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
print("\n–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤:")
num_cols = ['lead_time', 'no_of_weekend_nights', 'no_of_week_nights', 'avg_price_per_room']
plt.figure(figsize=(12, 6))
sns.boxplot(
    data=df[num_cols],
    palette=['#ab1636']*len(num_cols),
    width=0.5,
    flierprops=dict(marker='o', markersize=5, markerfacecolor='#3a7ca5')  # –í—ã–±—Ä–æ—Å—ã —Å–∏–Ω–∏–º
)
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Å –≤—ã–±—Ä–æ—Å–∞–º–∏)", fontsize=14, pad=15)
plt.xticks(rotation=45)
plt.show()

for col in num_cols:
    q1, q3 = df[col].quantile([0.25, 0.75])
    iqr = q3 - q1
    lower, upper = q1 - 1.5*iqr, q3 + 1.5*iqr
    outliers = df[(df[col] < lower) | (df[col] > upper)]
    print(f"\n{col}:")
    print(f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–æ—Å–æ–≤: [{lower:.1f}, {upper:.1f}]")
    print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)} ({len(outliers)/len(df)*100:.1f}%)")

print("\n–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
plt.figure(figsize=(10, 5))
sns.boxplot(
    x=df['lead_time'],
    color='#ab1636',
    width=0.3,
    linewidth=0.5,
    flierprops=dict(marker='o', markersize=3)
)
plt.title(
    "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∑–∞–µ–∑–¥–æ–º",
    fontsize=14,
    fontweight='bold',
    pad=15
)
plt.xlabel(
    "–î–Ω–µ–π",
    fontsize=12,
    labelpad=10
)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
num_cols = ['no_of_adults', 'no_of_children', 'no_of_weekend_nights', 'no_of_week_nights', 'avg_price_per_room']
plt.figure(figsize=(15, 8))
sns.boxplot(
    data=df[num_cols],
    palette=['#ab1636']*len(num_cols),
    width=0.5,
    linewidth=0.7
)
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", fontsize=16, pad=15)
plt.xticks(rotation=45)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

print("\n=== –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")

plt.figure(figsize=(10, 4))
sns.countplot(
    x='type_of_meal_plan',
    data=df,
    order=df['type_of_meal_plan'].value_counts().index,
    color='#ab1636',
    edgecolor='white',
    linewidth=0.5
)
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–∏—Ç–∞–Ω–∏—è", fontsize=14, fontweight='bold', pad=15)
plt.xlabel("–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è", fontsize=12, labelpad=10)
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
plt.xticks(rotation=45)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))
sns.countplot(
    x='type_of_meal_plan',
    hue='booking_status',
    data=df,
    palette=['#ab1636', '#3a7ca5'],
    edgecolor='white',
    linewidth=0.5
)
plt.title("–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è vs –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", fontsize=14, fontweight='bold', pad=15)
plt.xlabel("–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è", fontsize=12, labelpad=10)
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
plt.xticks(rotation=45)
plt.legend(title='–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏', title_fontsize=12, fontsize=11)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

print("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏ –ø–æ —Ç–∏–ø–∞–º –ø–∏—Ç–∞–Ω–∏—è:")
crosstab = pd.crosstab(
    index=df['type_of_meal_plan'],
    columns=df['booking_status'],
    normalize='index'
).round(2) * 100
display(crosstab.style
        .set_caption("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è (–≤ %)")
        .set_properties(**{'background-color': 'white', 'color': '#333333', 'border-color': 'white'})
        .format("{:.0f}%"))

# –í –±–ª–æ–∫–µ "–ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•"
print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö:")
for col in ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']:
    print(f"\n‚Ä¢ {col}:")
    display(df[col].value_counts(dropna=False).to_frame().style.set_caption(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}"))

### –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
# - **–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è:** Meal Plan 1 –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ 60% –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
# - **–ö–∞–Ω–∞–ª—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** 72% —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω-–∫–∞–Ω–∞–ª—ã.
# - **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:** –°—Ä–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (`lead_time`) –∏ –æ—Ç–º–µ–Ω—ã (+0.45).

print("\n=== –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")

plt.figure(figsize=(8, 8))
df['room_type_reserved'].value_counts().plot.pie(
    autopct='%1.1f%%',
    colors=['#ab1636', '#d92b4b', '#f26a8d', '#ff9bb3', '#c5e0f9', '#8cb9e8', '#5a8fd3'],
    wedgeprops={'edgecolor': 'white', 'linewidth': 0.5},
    textprops={'fontsize': 12}
)
plt.title("–î–æ–ª—è —Ç–∏–ø–æ–≤ –Ω–æ–º–µ—Ä–æ–≤", fontsize=16, fontweight='bold', pad=20)
plt.ylabel('')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 5))
sns.countplot(
    x='room_type_reserved',
    hue='booking_status',
    data=df,
    palette=['#ab1636', '#3a7ca5'],
    edgecolor='white',
    linewidth=0.5
)
plt.title("–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ –ø–æ —Ç–∏–ø–∞–º –Ω–æ–º–µ—Ä–æ–≤", fontsize=16, fontweight='bold', pad=15)
plt.xlabel("–¢–∏–ø –Ω–æ–º–µ—Ä–∞", fontsize=12, labelpad=10)
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
plt.xticks(rotation=45)
plt.legend(title='–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏', title_fontsize=12, fontsize=11)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

print("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏ –ø–æ —Ç–∏–ø–∞–º –Ω–æ–º–µ—Ä–æ–≤:")
crosstab = pd.crosstab(
    index=df['room_type_reserved'],
    columns=df['booking_status'],
    normalize='index'
).round(3) * 100

display(crosstab.style
        .set_caption("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ (–≤ %)")
        .set_properties(**{'background-color': 'white', 'color': '#333333'})
        .format("{:.1f}%"))

print("\n=== –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")

plt.figure(figsize=(10, 4))
sns.countplot(
    x='market_segment_type',
    data=df,
    order=df['market_segment_type'].value_counts().index,
    color='#ab1636',
    edgecolor='white',
    linewidth=0.5
)
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", fontsize=14, fontweight='bold', pad=15)
plt.xlabel("–ö–∞–Ω–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", fontsize=12, labelpad=10)
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
plt.xticks(rotation=45)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))
sns.countplot(
    x='market_segment_type',
    hue='booking_status',
    data=df,
    palette=['#ab1636', '#3a7ca5'],
    edgecolor='white',
    linewidth=0.5
)
plt.title("–ö–∞–Ω–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è vs –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏", fontsize=14, fontweight='bold', pad=15)
plt.xlabel("–ö–∞–Ω–∞–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", fontsize=12, labelpad=10)
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
plt.xticks(rotation=45)
plt.legend(title='–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏', title_fontsize=12, fontsize=11)
ax = plt.gca()
ax.set_facecolor('white')
for spine in ['top', 'right']:
    ax.spines[spine].set_visible(False)
plt.tight_layout()
plt.show()

print("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
crosstab = pd.crosstab(
    index=df['market_segment_type'],
    columns=df['booking_status'],
    normalize='index'
).round(3) * 100

display(crosstab.style
        .set_caption("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º (–≤ %)")
        .set_properties(**{'background-color': 'white', 'color': '#333333'})
        .format("{:.1f}%")
        .highlight_max(axis=1, color='#f26a8d'))

print("\n=== –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")

print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤:")
print(df['booking_status'].value_counts())

plt.figure(figsize=(6, 6))
wedges, texts, autotexts = plt.pie(
    df['booking_status'].value_counts(),
    autopct='%1.1f%%',
    colors=['#3a7ca5', '#ab1636'],
    wedgeprops={'edgecolor': 'white', 'linewidth': 0.5},
    textprops={'fontsize': 12},
    startangle=90
)

plt.title("–î–æ–ª—è –æ—Ç–º–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –±—Ä–æ–Ω–∏", fontsize=14, fontweight='bold', pad=20)
plt.legend(
    wedges,
    ['–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω–æ'],
    title='–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏',
    loc='upper right',
    bbox_to_anchor=(1, 0.9)
)
plt.tight_layout()
plt.show()
status_counts = df['booking_status'].value_counts(normalize=True).round(3) * 100
not_canceled = status_counts.iloc[0] if '–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' in status_counts else status_counts.iloc[1]
canceled = status_counts.iloc[1] if '–ù–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' in status_counts else status_counts.iloc[0]
print(f"\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:")
print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {not_canceled}%")
print(f"–û—Ç–º–µ–Ω–µ–Ω–æ: {canceled}%")

print("\n=== –°–û–ó–î–ê–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –ü–†–ò–ó–ù–ê–ö–û–í ===")

df['lenght_of_stay'] = df['no_of_week_nights'] + df['no_of_weekend_nights']
df['total_guests'] = df['no_of_adults'] + df['no_of_children']
df['type_of_accommodation'] = pd.cut(
    df['lenght_of_stay'],
    bins=[0, 2, 5, 100],
    labels=['short', 'middle', 'long']
)
df['group_type'] = pd.cut(
    df['total_guests'],
    bins=[0, 1, 2, 4, 100],
    labels=['one', 'pair', 'family', 'group']
)
df['booking_type'] = pd.cut(
    df['lead_time'],
    bins=[-1, 3, 30, 365],
    labels=['last moment', 'standard', 'early']
)
df['season'] = pd.cut(
    df['arrival_month'],
    bins=[0, 2, 5, 8, 11, 12],
    labels=['winter', 'spring', 'summer', 'autumn', 'winter'],
    ordered=False
)

print("\n=== –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í ===")
new_cat_cols = ['type_of_accommodation', 'group_type', 'booking_type', 'season']

for col in new_cat_cols:
    print(f"\n‚îÄ‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞: {col} ‚îÄ‚îÄ")

    # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã):")
    value_counts = df[col].value_counts(dropna=False)
    value_percents = df[col].value_counts(dropna=False, normalize=True).mul(100).round(1)
    display(pd.DataFrame({
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': value_counts,
        '–î–æ–ª—è (%)': value_percents
    }))

    # 2. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
    plt.figure(figsize=(10, 5))
    ax = df[col].value_counts().plot.bar(
        color='#ab1636',
        edgecolor='white',
        width=0.7
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for p in ax.patches:
        ax.annotate(f'{int(p.get_height())}\n({p.get_height()/len(df)*100:.1f}%)',
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center',
                   xytext=(0, 10),
                   textcoords='offset points',
                   fontsize=10)

    plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {col}", fontsize=14, pad=15)
    plt.xlabel("")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", fontsize=12)
    plt.xticks(rotation=45, fontsize=11)
    ax = plt.gca()
    ax.set_facecolor('white')
    for spine in ['top', 'right']:
        ax.spines[spine].set_visible(False)
    plt.tight_layout()
    plt.show()

# --- 2. –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ß–ò–°–õ–û–í–´–• –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
num_new_cols = ['lenght_of_stay', 'total_guests']
for col in num_new_cols:
    print(f"\n‚îÄ‚îÄ –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤: {col} ‚îÄ‚îÄ")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É
    print("\n–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    display(df[col].describe().to_frame('–ó–Ω–∞—á–µ–Ω–∏–µ'))

    plt.figure(figsize=(12, 5))

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
    plt.subplot(1, 2, 1)
    sns.histplot(
        x=df[col],
        color='#ab1636',
        kde=True,
        bins=30
    )
    plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}", fontsize=12, pad=10)
    plt.xlabel(col, fontsize=10)
    plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞", fontsize=10)

    # Boxplot
    plt.subplot(1, 2, 2)
    sns.boxplot(
        x=df[col],
        color='#ab1636',
        width=0.4,
        flierprops=dict(marker='o', markersize=5, markerfacecolor='#3a7ca5')
    )
    plt.title(f"–í—ã–±—Ä–æ—Å—ã: {col}", fontsize=12, pad=10)
    plt.xlabel("")
    plt.xticks(fontsize=10)

    plt.tight_layout()
    plt.show()

    q1, q3 = df[col].quantile([0.25, 0.75])
    iqr = q3 - q1
    lower, upper = q1 - 1.5*iqr, q3 + 1.5*iqr
    outliers = df[(df[col] < lower) | (df[col] > upper)]
    print(f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–æ—Å–æ–≤: [{lower:.1f}, {upper:.1f}]")
    print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)} ({len(outliers)/len(df)*100:.1f}%)")

# --- 3. –ê–Ω–∞–ª–∏–∑ –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
new_cat_columns = ['booking_type', 'season', 'type_of_accommodation', 'group_type']

for col in new_cat_columns:
    print(f"\n{'='*50}\n–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–∞: {col}\n{'='*50}")

    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã):")
    value_counts = df[col].value_counts(dropna=False)
    value_percents = df[col].value_counts(dropna=False, normalize=True).mul(100).round(1)
    display(pd.DataFrame({
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': value_counts,
        '–î–æ–ª—è (%)': value_percents
    }))

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    plt.figure(figsize=(12, 6))
    ax = sns.countplot(
        x=col,
        data=df,
        order=df[col].value_counts().index,
        color='#ab1636',
        edgecolor='white',
        linewidth=0.5
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for p in ax.patches:
        ax.annotate(f'{int(p.get_height())}\n({p.get_height()/len(df)*100:.1f}%)',
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center',
                   xytext=(0, 10),
                   textcoords='offset points',
                   fontsize=10)

    plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {col}", fontsize=14, fontweight='bold', pad=15)
    plt.xlabel(col, fontsize=12, labelpad=10)
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
    plt.xticks(rotation=45)
    ax = plt.gca()
    ax.set_facecolor('white')
    for spine in ['top', 'right']:
        ax.spines[spine].set_visible(False)
    plt.tight_layout()
    plt.show()

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–∏ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    plt.figure(figsize=(12, 6))
    ax = sns.countplot(
        x=col,
        hue='booking_status',
        data=df,
        palette=['#3a7ca5', '#ab1636'],
        edgecolor='white',
        linewidth=0.5
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for p in ax.patches:
        ax.annotate(f'{int(p.get_height())}',
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha='center', va='center',
                   xytext=(0, 5),
                   textcoords='offset points',
                   fontsize=9)

    plt.title(f"–í–ª–∏—è–Ω–∏–µ {col} –Ω–∞ –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏", fontsize=14, fontweight='bold', pad=15)
    plt.xlabel(col, fontsize=12, labelpad=10)
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", fontsize=12, labelpad=10)
    plt.xticks(rotation=45)
    plt.legend(title='–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏', title_fontsize=12, fontsize=11)
    ax = plt.gca()
    ax.set_facecolor('white')
    for spine in ['top', 'right']:
        ax.spines[spine].set_visible(False)
    plt.tight_layout()
    plt.show()

    # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤
    print("\n–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
    crosstab = pd.crosstab(
        index=df[col],
        columns=df['booking_status'],
        normalize='index'
    ).round(3) * 100
    display(crosstab.style
            .set_caption(f"–°—Ç–∞—Ç—É—Å—ã –±—Ä–æ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {col} (–≤ %)")
            .set_properties(**{'background-color': 'white', 'color': '#333333'})
            .format("{:.1f}%"))

print("\n=== –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó ===")

plt.figure(figsize=(12, 8))
corr = df.select_dtypes(include=['number']).corr()
mask = np.triu(np.ones_like(corr, dtype=bool))
heatmap = sns.heatmap(
    corr,
    mask=mask,
    annot=True,
    cmap=['#3a7ca5', 'white', '#ab1636'],
    center=0,
    fmt=".2f",
    linewidths=.5,
    cbar_kws={'label': '–£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏'}
)

plt.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", fontsize=16, fontweight='bold', pad=20)
heatmap.set_xticklabels(
    heatmap.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
)
heatmap.set_yticklabels(
    heatmap.get_yticklabels(),
    rotation=0
)

plt.tight_layout()
plt.show()

df.to_csv('hotel_new_features.csv', index=False)

df

df_new = pd.read_csv("hotel_new_features.csv")
df_new.head()

df_new.columns

df_new = df_new.drop(['Booking_ID'], axis=1)
df_new = df_new.drop(['arrival_year'], axis=1)
df_new

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.feature_selection import VarianceThreshold, SelectKBest, f_classif, RFE
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df_new.drop('booking_status', axis=1)
y = df_new['booking_status']

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
le = LabelEncoder()
y_encoded = le.fit_transform(y)

df_new['booking_status'] = df_new['booking_status'].map({'Not_Canceled': 0, 'Canceled': 1})

df_new

## 1. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
categorical_cols = X.select_dtypes(include=['object']).columns
numerical_cols = X.select_dtypes(exclude=['object']).columns

print("\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:", categorical_cols.tolist())
print("–ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:", numerical_cols.tolist())

# –ú–µ—Ç–æ–¥ Label Encoding –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
label_cols = [col for col in categorical_cols if X[col].nunique() <= 5]
for col in label_cols:
    X[col] = LabelEncoder().fit_transform(X[col])

# –ú–µ—Ç–æ–¥ One-Hot Encoding –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
ohe_cols = [col for col in categorical_cols if X[col].nunique() > 5]
X = pd.get_dummies(X, columns=ohe_cols, drop_first=True)

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
X.fillna(X.mean(), inplace=True)

## 2. –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
### 2.1. –ú–µ—Ç–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
selector = VarianceThreshold(threshold=0.01)  # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π < 0.01
X_variance = selector.fit_transform(X)
selected_features_variance = X.columns[selector.get_support()]
print(f"–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–±–æ—Ä–∞ –ø–æ –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {len(selected_features_variance)} –∏–∑ {X.shape[1]}: ", selected_features_variance)

##2.2 –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
numeric_features = df_new.select_dtypes(include=['int64', 'float64']).columns
correlation_matrix = df_new[numeric_features].corr()

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
plt.show()

# –£–¥–∞–ª—è–µ–º —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
upper = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool))
to_drop = [column for column in upper.columns if any(upper[column] > 0.8)]
X_corr = X.drop(to_drop, axis=1)
print(f"–£–¥–∞–ª–µ–Ω–æ {len(to_drop)} —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: ", to_drop)

### 2.3. –ú–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA)
# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ PCA
pca = PCA()
X_pca = pca.fit_transform(X_scaled)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
plt.figure(figsize=(10, 6))
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')
plt.ylabel('–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è')
plt.title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è')
plt.grid()
plt.show()

# –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –æ–±—ä—è—Å–Ω—è—é—â–∏—Ö 95% –¥–∏—Å–ø–µ—Ä—Å–∏–∏
n_components = np.argmax(np.cumsum(pca.explained_variance_ratio_) >= 0.95) + 1
print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {n_components}")

### 2.4. –ú–µ—Ç–æ–¥—ã –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (RFE)
# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Random Forest –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏ –¥–ª—è RFE
model = RandomForestClassifier(random_state=42)
rfe = RFE(estimator=model, n_features_to_select=15, step=1)
rfe.fit(X_train, y_train)

# –û—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
selected_features_rfe = X.columns[rfe.support_]
print("–õ—É—á—à–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ RFE:", selected_features_rfe.tolist())

### 2.5. –ú–µ—Ç–æ–¥—ã –≤–ª–æ–∂–µ–Ω–∏—è (Feature Importance)
model.fit(X_train, y_train)
importances = model.feature_importances_

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
indices = np.argsort(importances)[::-1]
features = X.columns

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
plt.figure(figsize=(12, 8))
plt.title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Random Forest)")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.tight_layout()
plt.show()

# –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-15 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
top_n = 15
selected_features_importance = features[indices][:top_n]
print(f"–¢–æ–ø-{top_n} –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:", selected_features_importance.tolist())

## 3. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
final_features = set(selected_features_variance) & set(X_corr.columns) & set(selected_features_rfe) & set(selected_features_importance)
print(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(final_features)}")
print("–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:", final_features)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
X_final = X[list(final_features)]

X_final['booking_status'] = y_encoded
Final_features = X_final
Final_features

Final_features.to_csv('Final_features.csv', index=False)

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_recall_curve, roc_curve, roc_auc_score, ConfusionMatrixDisplay, auc
from imblearn.over_sampling import SMOTE

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv('Final_features.csv')
print(df['booking_status'].value_counts())

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X = df.drop('booking_status', axis=1)
y = df['booking_status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10, stratify=y)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
scaled_X_train = scaler.fit_transform(X_train)
scaled_X_test = scaler.transform(X_test)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
print("–ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –≤ y_train –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", pd.Series(y_train).value_counts())
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(scaled_X_train, y_train)
print("–ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –≤ y_train –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", pd.Series(y_train_resampled).value_counts())

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–¥–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

# –ò—Å–ø–æ–ª—å–∑—É–µ–º GridSearchCV –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
param_grid = {'solver': ['liblinear', 'lbfgs', 'newton-cg', 'sag', 'saga']}
grid_model = GridSearchCV(LogisticRegression(random_state=42),
                           param_grid,
                           scoring='recall',
                           cv=5,
                           verbose=0)

grid_model.fit(X_train_resampled, y_train_resampled)

print("–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", grid_model.best_params_)
best_log_model = grid_model.best_estimator_

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
y_pred = best_log_model.predict(scaled_X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

disp = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test, y_pred),
                               display_labels=best_log_model.classes_)
disp.plot()
plt.show()


print("Classification Report:\n", classification_report(y_test, y_pred))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
y_proba = best_log_model.predict_proba(scaled_X_test)[:, 1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ 1

# –í—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞
threshold = 0.6

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–∞:
y_pred_threshold = (y_proba > threshold).astype(int)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–æ–º:
print("\n–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–æ–º ({}):".format(threshold))
print("Accuracy:", accuracy_score(y_test, y_pred_threshold))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_threshold))

disp_threshold = ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test, y_pred_threshold),
                               display_labels=best_log_model.classes_)
disp_threshold.plot()
plt.show()

print("Classification Report:\n", classification_report(y_test, y_pred_threshold))

fpr_threshold, tpr_threshold, thresholds_roc_threshold = roc_curve(y_test, y_proba) #y_proba –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è auc_roc
roc_auc_threshold = roc_auc_score(y_test, y_proba) #y_proba –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è auc_roc


plt.plot(fpr_threshold, tpr_threshold, label=f'ROC AUC (Threshold = {threshold:.2f}) = {roc_auc_threshold:.2f}')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve (Custom Threshold)')
plt.legend()
plt.show()

y_proba = best_log_model.predict_proba(scaled_X_test)[:, 1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ 1
y_proba_class0 = 1-y_proba # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ 0

# ROC AUC
fpr, tpr, thresholds_roc = roc_curve(y_test, y_proba_class0, pos_label = 0)
roc_auc = roc_auc_score(y_test, y_proba)

plt.plot(fpr, tpr, label=f'ROC AUC = {roc_auc:.2f}')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–ª–∞—Å—Å–∞–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
proba = best_log_model.predict_proba(scaled_X_test)

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
proba_df = pd.DataFrame(proba, columns=['Probability_Class_0', 'Probability_Class_1'])
proba_df['Actual_Class'] = y_test.values
proba_df['Predicted_Class'] = y_pred_threshold

# –í—ã–≤–æ–¥ DataFrame —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
print("\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–ª–∞—Å—Å–∞–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
print(proba_df.head())

# –ü—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤–æ–≥–æ)
instance_index = 0
probability_of_booking = proba_df['Probability_Class_1'][instance_index]
print(f"\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {instance_index}: {probability_of_booking:.4f}")